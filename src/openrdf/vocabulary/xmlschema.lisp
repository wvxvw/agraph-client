(in-package :openrdf.vocabulary)

(defparameter +ns+ "http://www.w3.org/2001/XMLSchema#")
(defparameter +duration+ (make-instance 'uri :namespace +ns+ :localname "duration"))
(defparameter +datetime+ (make-instance 'uri :namespace +ns+ :localname "dateTime"))
(defparameter time+ (make-instance 'uri :namespace +ns+ :localname "time"))
(defparameter +date+ (make-instance 'uri :namespace +ns+ :localname "date"))
(defparameter +gyearmonth+ (make-instance 'uri :namespace +ns+ :localname "gYearMonth"))
(defparameter +gyear+ (make-instance 'uri :namespace +ns+ :localname "gYear"))
(defparameter +gmonthday+ (make-instance 'uri :namespace +ns+ :localname "gMonthDay"))
(defparameter +gday+ (make-instance 'uri :namespace +ns+ :localname "gDay"))
(defparameter +gmonth+ (make-instance 'uri :namespace +ns+ :localname "gMonth"))
(defparameter +string+ (make-instance 'uri :namespace +ns+ :localname "string"))
(defparameter +boolean+ (make-instance 'uri :namespace +ns+ :localname "boolean"))
(defparameter +base64binary+ (make-instance 'uri :namespace +ns+ :localname "base64Binary"))
(defparameter +hexbinary+ (make-instance 'uri :namespace +ns+ :localname "hexBinary"))
(defparameter +float+ (make-instance 'uri :namespace +ns+ :localname "float"))
(defparameter +decimal+ (make-instance 'uri :namespace +ns+ :localname "decimal"))
(defparameter +double+ (make-instance 'uri :namespace +ns+ :localname "double"))
(defparameter +anyuri+ (make-instance 'uri :namespace +ns+ :localname "anyURI"))
(defparameter +qname+ (make-instance 'uri :namespace +ns+ :localname "QName"))
(defparameter +notation+ (make-instance 'uri :namespace +ns+ :localname "NOTATION"))
(defparameter +normalizedstring+ (make-instance 'uri :namespace +ns+ :localname "normalizedString"))
(defparameter +token+ (make-instance 'uri :namespace +ns+ :localname "token"))
(defparameter +language+ (make-instance 'uri :namespace +ns+ :localname "language"))
(defparameter +nmtoken+ (make-instance 'uri :namespace +ns+ :localname "NMTOKEN"))
(defparameter +nmtokens+ (make-instance 'uri :namespace +ns+ :localname "NMTOKENS"))
(defparameter +name+ (make-instance 'uri :namespace +ns+ :localname "Name"))
(defparameter +ncname+ (make-instance 'uri :namespace +ns+ :localname "NCName"))
(defparameter +id+ (make-instance 'uri :namespace +ns+ :localname "ID"))
(defparameter +idref+ (make-instance 'uri :namespace +ns+ :localname "IDREF"))
(defparameter +idrefs+ (make-instance 'uri :namespace +ns+ :localname "IDREFS"))
(defparameter +entity+ (make-instance 'uri :namespace +ns+ :localname "ENTITY"))
(defparameter +entities+ (make-instance 'uri :namespace +ns+ :localname "ENTITIES"))
(defparameter +integer+ (make-instance 'uri :namespace +ns+ :localname "integer"))
(defparameter +long+ (make-instance 'uri :namespace +ns+ :localname "long"))
(defparameter +int+ (make-instance 'uri :namespace +ns+ :localname "int"))
(defparameter +short+ (make-instance 'uri :namespace +ns+ :localname "short"))
(defparameter +number+ (make-instance 'uri :namespace +ns+ :localname "number")        +)
(defparameter +byte+ (make-instance 'uri :namespace +ns+ :localname "byte"))
(defparameter +non-positive-integer+ (make-instance 'uri :namespace +ns+ :localname "nonPositiveInteger"))
(defparameter +negative-nteger+ (make-instance 'uri :namespace +ns+ :localname "negativeInteger"))
(defparameter +non-negative-integer+ (make-instance 'uri :namespace +ns+ :localname "nonNegativeInteger"))
(defparameter +positive-nteger+ (make-instance 'uri :namespace +ns+ :localname "positiveInteger"))
(defparameter +unsigned-long+ (make-instance 'uri :namespace +ns+ :localname "unsignedLong"))
(defparameter +unsigned-int+ (make-instance 'uri :namespace +ns+ :localname "unsignedInt"))
(defparameter +unsigned-short+ (make-instance 'uri :namespace +ns+ :localname "unsignedShort"))
(defparameter +unsigned-byte+ (make-instance 'uri :namespace +ns+ :localname "unsignedByte"))
